/*
Ponteiros (* e &) üìå
Ponteiros s√£o vari√°veis que armazenam endere√ßos de mem√≥ria de outras vari√°veis.

O operador & (endere√ßo de) retorna o endere√ßo de mem√≥ria de uma vari√°vel.
O operador * (ponteiro para ou desrefer√™ncia) declara um ponteiro ou acessa o valor no endere√ßo de mem√≥ria apontado.
Por que usar ponteiros?

Aloca√ß√£o din√¢mica de mem√≥ria: Criar vari√°veis em tempo de execu√ß√£o.
Passagem de arrays e objetos para fun√ß√µes de forma eficiente: Evita copiar grandes blocos de dados.
Manipula√ß√£o direta de mem√≥ria: √ötil em programa√ß√£o de baixo n√≠vel e para certas estruturas de dados.

*/
#include <iostream>

int main() {
    int numero = 10;     // 'numero' √© uma gaveta (digamos, no endere√ßo 1001) com o valor 10 dentro.
    int* ptrNumero;      // 'ptrNumero' √© uma gaveta especial para guardar endere√ßos de inteiros.

    ptrNumero = &numero; // 'ptrNumero' agora guarda o endere√ßo de 'numero' (1001).
                         // Dizemos: 'ptrNumero' aponta para 'numero'.

    // O que temos?
    std::cout << "Valor de numero: " << numero << std::endl; // Mostra o que tem em 'numero' (10).
    std::cout << "Endere√ßo de numero (&numero): " << &numero << std::endl; // Mostra o endere√ßo da gaveta 'numero' (1001).
    std::cout << "Valor de ptrNumero (o endere√ßo que ele guarda): " << ptrNumero << std::endl; // Mostra o que tem em 'ptrNumero' (1001).
    std::cout << "Valor apontado por ptrNumero (*ptrNumero): " << *ptrNumero << std::endl; // V√° ao endere√ßo que 'ptrNumero' guarda (1001) e pegue o valor l√° (10).

    // Modificando 'numero' atrav√©s do ponteiro
    *ptrNumero = 20;     // V√° ao endere√ßo que 'ptrNumero' guarda (1001) e coloque 20 l√°.
                         // A gaveta 'numero' (no endere√ßo 1001) agora cont√©m 20.

    std::cout << "Novo valor de numero: " << numero << std::endl; // Mostra o novo valor de 'numero' (20).

    return 0;
}

/*
 Analogia dos Ponteiros com Gavetas:

 1. Vari√°vel Normal (ex: int numero = 10;):
    - √â como uma GAVETA que guarda um VALOR diretamente (o n√∫mero 10).
    - Cada gaveta tem um ENDERE√áO √∫nico na mem√≥ria (como o n√∫mero de um apartamento).

 2. Ponteiro (ex: int* ptr;):
    - √â uma GAVETA ESPECIAL que n√£o guarda um valor comum, mas sim o ENDERE√áO de outra gaveta.
    - √â como um "bilhete" que diz onde encontrar a gaveta original.

 3. Operador '&' (Endere√ßo de - ex: &numero):
    - Pergunta: "Qual √© o ENDERE√áO da gaveta 'numero'?"
    - Retorna o endere√ßo da mem√≥ria onde 'numero' est√° guardado.
    - Ex: ptr = &numero;  // O ponteiro 'ptr' agora cont√©m o endere√ßo da gaveta 'numero'.

 4. Operador '*' (Valor Apontado Por / Desrefer√™ncia - ex: *ptr):
    - Pergunta: "Qual √© o VALOR que est√° DENTRO da gaveta cujo endere√ßo est√° no 'ptr'?"
    - Acessa o valor da vari√°vel original para a qual o ponteiro aponta.
    - Ex: std::cout << *ptr; // Mostra o valor guardado na gaveta 'numero'.
    - Ex: *ptr = 20;        // Muda o valor DENTRO da gaveta 'numero' para 20, usando o ponteiro.

 Resumindo:
 - Vari√°vel: Guarda o dado.
 - Ponteiro: Guarda o endere√ßo de onde o dado est√°.
 - '&' pega o endere√ßo.
 - '*' acessa o dado atrav√©s do endere√ßo.
*/